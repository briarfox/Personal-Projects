UserInfo = {}

--local userTbl = {{name="test",email="",ip=""}}
local dupEmail = {}
local dupIp = {}
local bots = {}
local tmpUsers = {}
local email = ""
local ip = ""
local str = ""
--local function
local parseUser
local parsePage
local checkBots
local checkEmail
local checkIp
local displayBots
local postDelete
local deleteConfirm
local displayInfo
local updateCounter
local removeNonConfirm
UserInfo.botCounter = 1
UserInfo.co = nil

UserInfo.rPending = 0

local vars = {}
vars.pages = 120
vars.userList = "http://codea.io/talk/dashboard/user?Page=p%d&order=DateFirstVisit"
vars.UsersLoaded = false
vars.delete = "http://codea.io/talk/user/delete/%d/delete"
vars.postFirst = "Form%2FTransientKey="
vars.postSecond = "&Form%2Fhpt=&Form%2FDelete_User_Forever=Delete+User+Forever"
vars.month = {January=1,February=2,March=3,April=4,May=5,June=6,July=7,August=8,September=9,October=10,
                    November=11,December=12}
vars.loading = {".","..","...","....","....."}
vars.loadingCtr = 1
vars.displayURL = "http://codea.housercompany.com/display.php"
vars.params = {}
vars.params.headers = {}
vars.params.headers["Accept"] = "text/plain"
vars.params.headers["Content-Type"] = "application/x-www-form-urlencoded"
vars.params.headers["Accept-Charset"] = "utf-8"
vars.params["method"] = "POST"
vars.params["data"] = ""

UserInfo.createList = function()
            parsePage()
end

UserInfo.draw = function()
    if UserInfo.co then
        if coroutine.status(UserInfo.co) == "suspended" then
                coroutine.resume(UserInfo.co)
        end
        CO_Status = coroutine.status(UserInfo.co)
    end
    if vars.displayInfo == true then
        displayInfo()
        vars.displayInfo = false
    end
    --print("drawing")
end

updateCounter = function(str,ctr)
    if ctr%100 ==0 then
    vars.loadingCtr = vars.loadingCtr + 1
    if vars.loadingCtr >= #vars.loading then vars.loadingCtr = 1 end
    Status = str..vars.loading[vars.loadingCtr]

    coroutine.yield()
    end
end

checkUsers = function(str)
    
    parameter.clear()
    parameter.watch("Status")
    Status = "waiting"
    parameter.action("View Duplicates",function() print("Please Wait...")
    --checkEmail()
    UserInfo.co =  coroutine.create(function() checkEmail() checkIp() vars.displayInfo = true end)
    coroutine.resume(UserInfo.co)
    
        

   -- checkIp() 
    --displayInfo()
    end)
    --parameter.action("Check IP",function() print("Please wait...")checkIp() end)
    parameter.action("Check Bots",function() print("Please wait...")checkBots() end)
    parameter.action("Remove Non Confimed",function() removeNonConfirm() end)
    --parameter.action("Delete Non Confirm",function() deleteConfirm() end)
    
    
  
end

removeNonConfirm = function()
    local maxDays = 1
    
    for i=1,#tmpUsers do
                
    local pastMonth,pastDay,pastYear = string.match(tmpUsers[i].login,"(%w*)[ ]+(%d*)%,[ ]+(%d*)")
    local currentDate = os.date("*t")
                if tmpUsers[i].confirm =="false" and pastDay and pastYear and pastMonth then 
                    if currentDate.year > tonumber(pastYear) then
                        print("Over a year"..tmpUsers[i].name,tmpUsers[i].login)
                    else
                        if currentDate.month > tonumber(vars.month[pastMonth]) then
                            print("Over a month"..tmpUsers[i].name,tmpUsers[i].login)
                        else
                            if currentDate.day >= tonumber(pastDay) +maxDays then
                                local id = tmpUsers[i].id
                                if id then
                                --print("id is:"..id)
                                postDelete(tonumber(id))
                                end
                                print("Over 2 days "..tmpUsers[i].name,tmpUsers[i].login)
                                
                            end
                        end
                    end
                end
            
                    

    end

end



--Check for bots
checkBots = function()
    --Check Bots
    for i=1,#tmpUsers do
        if tmpUsers[i].email and tmpUsers[i].confirm == "false" then
            local _, count = string.gsub(tmpUsers[i].email,"%.", "")
            if count >2 then 
                table.insert(bots,tmpUsers[i])
            elseif string.match(tmpUsers[i].email,"%+") and string.match(tmpUsers[i].name,"%d%d%d$") then
                table.insert(bots,tmpUsers[i])
            --else
            --table.insert(bots,tmpUsers[i]) end
            end
        end
    end
    
    displayBots()
end



--check for duplicate email
checkEmail = function()
        --Check Email
    local coCounter = 1
    
    for i=1,#tmpUsers do
        updateCounter("Parseing Emails",coCounter)
        coCounter = coCounter + 1
        if tmpUsers[i].email then
            local _, count = string.gsub(email, tmpUsers[i].email, "")
            if count >1 then 
                
                if not dupEmail[tmpUsers[i].email] then 
                    dupEmail[tmpUsers[i].email] = {email=tmpUsers[i].email,names={}}
                    
                end
                
                local tbl = {tmpUsers[i].name,tmpUsers[i].login,tmpUsers[i].id}
                table.insert(dupEmail[tmpUsers[i].email]["names"],tbl)
            end
        end
        
    end
    
     --Save Results
    str = str.."<h3>Duplicate Email Addresses.</h3><br><br>"
    for i,j in pairs (dupEmail) do
        updateCounter("Loading Email html",coCounter)
        coCounter = coCounter + 1
        str = str..j.email.."<ul>"
        for l=1,#j.names do

            str = str.."<li><a href='http://codea.io/talk/profile/"..j.names[l][3].."/"..j.names[l][1].."'>"..j.names[l][1].."</a> - "..j.names[l][2].."</li>"
        end
        str = str.."</ul>"
    end
   -- str = str.."\n--]]"
    
    --saveProjectTab("Duplicate_Emails",str)
end


--Check for duplicate ips
checkIp = function()
      --Check ip
    local coCtr = 1
    
    for i=1,#tmpUsers do
        updateCounter("Parseing IP's",coCtr)
        coCtr = coCtr + 1 
        if tmpUsers[i].ip then
            local _, count = string.gsub(ip, tmpUsers[i].ip, "")
            if count >1 then 
        
                if not dupIp[tmpUsers[i].ip] then 
                
                    dupIp[tmpUsers[i].ip] = {ip = tmpUsers[i].ip,names={}}
                    
                end
                local tbl = {tmpUsers[i].name,tmpUsers[i].email,tmpUsers[i].login,tmpUsers[i].id}
                
                table.insert(dupIp[tmpUsers[i].ip]["names"],tbl)
            end
        end
    end
    
    
    
   
    
    str =str.."<h3>Duplicate IP Address</h3>"
    for i,j in pairs (dupIp) do
        updateCounter("Creating IP html",coCtr)
        coCtr = coCtr + 1 
        if j.ip ~= "nil" then
            str = str..j.ip.."<ul>"
            for l=1,#j.names do
            
            str = str.."<li><a href='http://codea.io/talk/profile/"..j.names[l][4].."/"..j.names[l][1].."'>"..j.names[l][1].."</a>  -  "..j.names[l][2].."  -  "..j.names[l][3].."</li>"
               -- str = str.."\t"..j.names[l][1].."\t\t"..j.names[l][2].."\t\t"..j.names[l][3].."\n"
            end
            str = str.."</ul>"
        end
    end
end


--Display Bots
displayBots = function()
    local loadBot = function()
        Bot_Count = #bots - UserInfo.botCounter
        UserInfo.botCounter = UserInfo.botCounter + 1 
        if UserInfo.botCounter <= #bots then
            --local member = bots[UserInfo.botCounter].confirm and "false" or "true"
        Bot = "User: "..bots[UserInfo.botCounter].name.."\n"..
        "Email: "..bots[UserInfo.botCounter].email.."\n"..
        "First Visit: "..bots[UserInfo.botCounter].login.."\n"..
        "IP: "..bots[UserInfo.botCounter].ip.."\n"..
        "Confirmed Memeber: "..bots[UserInfo.botCounter].confirm.."\n"
        else
           print("Finished!")
            parameter.clear() 
        end
        
    end
    parameter.clear()
    parameter.watch("Bot_Count")
    parameter.watch("Bot")
    loadBot()
    parameter.action("Delete",function() 
        --openURL(string.format(vars.delete,bots[UserInfo.botCounter].id),true)
        postDelete()
        loadBot()
    end)
    parameter.action("Skip",function() 
        print("Skipped") 
        UserInfo.botCounter = UserInfo.botCounter + 1 
        loadBot()
    end)
    
end

displayInfo = function()
    --updateCounter("Displaying Info")
    vars.params["data"] = "html="..str.."&new=true"
    http.request(vars.displayURL,function()
        print("Opening page")
       -- updateCounter("finished",100)
        openURL(vars.displayURL,true)
    end,function(d)print(d) end,vars.params)
    --updateCounter("Finished",100)
    Status =      "loaded"
end

postDelete = function(id)
    print(id)

    local success = function(d)
        print("Deleted.")
    end
    
    local fail = function(d)
        print(d)
    end
    local params = {}
    params["method"] = "POST"
    params["data"] = vars.postFirst..tostring(VAccount.tKey)..vars.postSecond
    if id then
        http.request(string.format(vars.delete,id),success,fail,params)
    else
    http.request(string.format(vars.delete,bots[UserInfo.botCounter].id),success,fail,params)
    end
    
end

parsePage = function(pg)
    local function cb(d)
        UserInfo.rPending = UserInfo.rPending - 1
            -- print("cb called "..vars.pages)
            --print(d)
            local str = string.match(d,"%<tbody%>(.*)%<%/tbody%>")
            local counter = 0
            str = string.gsub(str,"<strong>at</strong>","@")
            str = string.gsub(str,"<em>dot</em>",".")
            for m in string.gmatch(str,"%<tr.-%>(.-)%<%/tr%>") do
                -- <td><strong><a href="/talk/profile/5619/tdsffer410">tdsffer410</a></strong></td>
                local tbl = {}
                tbl.id,tbl.name = string.match(m,
                '<td><strong><a href="/talk/profile/(%d*)/[%w%-%_%/]*">([%w%_%-]*)</a></strong></td>')
            
                tbl.id = tbl.id and tbl.id or "nil"
                tbl.name = tbl.name and tbl.name or "nil"
          
            
                --tbl.confirm = false
            
                
                
                tbl.email = string.match(m,
                '<td class="Alt"><span class="Email EmailUnformatted">([%w%.%@%-%_%+]*)</span></td>')
                tbl.email = tbl.email and tbl.email or "nil"
                if tbl.email then email = email.." "..tbl.email end
            
                tbl.login = string.match(m,
                '<td><span title="([ %w%,%:]*)">[%w %,%:]*</span></td>')
                tbl.login = tbl.login and tbl.login or "nil"
                
                local role = string.find(m,'Confirmation Required')
                tbl.confirm = role and "false" or "true"
            --[[
                if role then 
                    local pastMonth,pastDay,pastYear = string.match(tbl.login,"(%w*)[ ]+(%d*)%,[ ]+(%d*)")
                    local currentDate = os.date("*t")
                
                    if currentDate.year >= tonumber(pastYear) then
                        if currentDate.month >= tonumber(vars.month[pastMonth]) then
                            if currentDate.day > tonumber(pastDay) +1 then
                        
                                tbl.confirm = true
                            end
                        end
                    end
            
                    
            end
            --]]
            
                
                tbl.ip = string.match(m,"<td>(%d+%.%d+%.%d+%.%d+)</td>")
                tbl.ip = tbl.ip and tbl.ip or "nil"
                if tbl.ip then ip = ip.." "..tbl.ip end
                  if tbl.name == "ChrisNelsonOK" then print("Lammy Found",tbl.id,tbl.login,tbl.email,tbl.ip,tbl.confirm) end
                User_Read = User_Read + 1
                --print(tbl.name,tbl.email,tbl.ip)
                table.insert(tmpUsers,tbl)
            end
            
            if vars.pages > 0 then
                for i=1,5 do
                    vars.pages = vars.pages - 1
                    parsePage()
                    
                end
            else
            if UserInfo.rPending == 0 then
            vars.UsersLoaded = true
                print("Users Loaded.")    
                print("Checking Users...")
                checkUsers()
            end    
                --print("Users are Loaded.")
                --else
                --  for i=1,vars.pages do
                
                -- end
                
            end
            --vars.pages = vars.pages - 1
            --if vars.pages > 0 then parsePage() end
            
            
            
        
    end
    
    if vars.pages > 0 then 
        if vars.pages == 1 then print("page 1 read") end
    http.request(string.format(vars.userList,vars.pages),function(d) cb(d) end) 
    UserInfo.rPending = UserInfo.rPending + 1
    end
end



